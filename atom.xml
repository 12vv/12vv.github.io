<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Blog</title>
  
  
  <link href="https://12vv.github.io/atom.xml" rel="self"/>
  
  <link href="https://12vv.github.io/"/>
  <updated>2021-08-23T22:06:22.474Z</updated>
  <id>https://12vv.github.io/</id>
  
  <author>
    <name>Jaythan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS 模块化</title>
    <link href="https://12vv.github.io/2021/08/20/js-module/"/>
    <id>https://12vv.github.io/2021/08/20/js-module/</id>
    <published>2021-08-20T06:00:00.000Z</published>
    <updated>2021-08-23T22:06:22.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块化的演变"><a href="#模块化的演变" class="headerlink" title="模块化的演变"></a>模块化的演变</h2><p>在没有模块化的概念之前，代码量也不大的时候，可以直接将<code>JavaScript</code>代码写在<code>html</code>的<code>&lt;script&gt;</code>标签中，如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当代码量变多了，也可以在<code>html</code>引入外部<code>js</code>脚本，如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/index.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当业务变得复杂，人们开始<strong>根据页面</strong>来引入脚本，即一个页面就引入包含此逻辑的脚本，公用的脚本可以每个页面都引入。但是，当这个公用的脚本过于复杂，有多个处理逻辑，如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... many other functions</span></span><br></pre></td></tr></table></figure><p>有可能<code>页面1</code>只需要<code>fn1,fn2</code>等等很多函数，<code>页面2</code>却只需要<code>fn1</code>，却都要引入整个脚本，这就不太合理了。</p><p>那么，<strong>按照功能</strong>来分如何？我们在<code>a.js, b.js, c.js</code>分别处理<code>a, b, c</code>如下，然后引入该页面的逻辑<code>index.js</code>，简单起见这里<code>index.js</code>就简单的把<code>a, b, c</code>输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello there!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reverse();</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">var</span> b = a.concat([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.js</span></span><br><span class="line"><span class="keyword">var</span> c = b.join(<span class="string">'-'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleA.a);  <span class="comment">// [3, 2, 1]</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleB.b);  <span class="comment">// [3, 2, 1, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleC.c);  <span class="comment">// 3-2-1-4-5-6</span></span><br></pre></td></tr></table></figure><p>这种写法存在的问题：</p><ul><li><strong>顺序问题</strong>：在<code>html</code>的引入脚本的时候，顺序必须要按照模块的逻辑，否则就会报错，这是因为解析<code>html</code>会造成阻塞，解析完一个脚本再进行下一个，假设我们把<code>index.js</code>先引入了，这个时候<code>a,b,c</code>都还没有定义。</li><li><strong>作用域问题</strong>：可以看到这些文件是公用一个作用域的，在单独脚本暴露出来的变量，实际上都存在于<strong>全局</strong>作用域。容易发生变量覆盖等问题。</li></ul><p>这里就引出了模块化需要解决的问题：加载顺序，污染的全局变量。</p><p>为了避免全局变量的污染，可以通过闭包来尝试解决，将需要的变量通过返回值暴露出去即可。</p><p>下面通过立即执行函数把之前例子改写如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> moduleA = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reverse();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a: a</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// moduleA = &#123;a : a&#125;;</span></span><br></pre></td></tr></table></figure><p>该模块是暴露在全局的，可以<code>a</code>变量是模块局部的，在b中要使用可通过<code>moduleA.a</code>，下面通过注入的方式避免了在全局下寻找<code>moduleA</code>。</p><blockquote><p>这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。</p></blockquote><p>类似于<code>jQuery</code>：<code>;(function($){//do something}(jQuery))</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="comment">// 要使用 moduleA 中的变量，将 moduleA 注入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moduleB = (<span class="function"><span class="keyword">function</span>(<span class="params">moduleA</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = moduleA.a.concat([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    b: b</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(moduleA);</span><br></pre></td></tr></table></figure><p>在<code>c.js</code>中同理，通过注入<code>moduleB</code>来使用<code>moduleB</code>的变量。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.js</span></span><br><span class="line"><span class="keyword">var</span> moduleC = (<span class="function"><span class="keyword">function</span>(<span class="params">moduleB</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = moduleB.b.join(<span class="string">'-'</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    c: c</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(moduleB);</span><br></pre></td></tr></table></figure><p>最后，<code>index.js</code>依赖于以上模块。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">moduleA, moduleB, moduleC</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(moduleA.a);</span><br><span class="line">  <span class="built_in">console</span>.log(moduleB.b);</span><br><span class="line">  <span class="built_in">console</span>.log(moduleC.c);</span><br><span class="line">&#125;)(moduleA, moduleB, moduleC);</span><br></pre></td></tr></table></figure><p>但是该方法依然要求保证引入脚本的顺序。</p><blockquote><p>开发者通过实践，形成了一种插件化模式，很多也是通过立即执行函数来实现的。插件能够给用户提供一些可配置项，让用户通过配置项实现不同的功能。</p></blockquote><h2 id="模块化解决方案"><a href="#模块化解决方案" class="headerlink" title="模块化解决方案"></a>模块化解决方案</h2><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p><code>CommonJS</code> 是来源于 <code>NodeJS</code> 的一种规范，需要<code>node</code>环境。</p><p>并且由于它是同步加载的，通过<code>require</code>引用，必须加载完成后才会执行下面的代码(阻塞)，这样就很不适合浏览器环境。</p><blockquote><p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p></blockquote><p>这也是之后引入<code>异步模块定义(Asynchronous Module Definition, AMD)</code>的原因。</p><p>使用 <code>CommonJS</code> 改写上面的例子，此时<code>index.html</code>只需要引入<code>index.js</code>即可。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [common JS] a.js</span></span><br><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reverse();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  a</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [common JS] b.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moduleA = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> moduleA.a.concat([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  b</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [common JS] c.js</span></span><br><span class="line"><span class="keyword">var</span> moduleB = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> moduleB.b.join(<span class="string">'-'</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  c</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [common JS] index.js</span></span><br><span class="line"><span class="keyword">var</span> moduleA = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"><span class="keyword">var</span> moduleB = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line"><span class="keyword">var</span> moduleC = <span class="built_in">require</span>(<span class="string">'./c'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(moduleA.a);</span><br><span class="line"><span class="built_in">console</span>.log(moduleB.b);</span><br><span class="line"><span class="built_in">console</span>.log(moduleC.c);</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>require</code>会创建一个模块的实例，并且有缓存机制，</p><blockquote><p><code>CommonJS</code>一个模块对应一个脚本文件，<code>require</code> 命令每次加载一个模块就会执行整个脚本，然后生成一个对象。这个对象一旦生成，以后再次执行相同的 <code>require</code> 命令都会直接到缓存中取值。</p></blockquote><p>引用模块脚本进来其实是一个立即执行函数，例如，对于下面的 <code>JS</code> 模块文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> modulex = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// do something;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = modulex;</span><br></pre></td></tr></table></figure><p>引入时会被<code>node.js</code>包装成如下形式，这也是为什么我们能够使用<code>exports, require, module</code>的原因。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> modulex = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// do something;</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="built_in">module</span>.exports = modulex;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p><code>异步模块定义(Asynchronous Module Definition, AMD)</code>是是在浏览器环境下出现的模块化解决方案，异步加载模块，并且是前置依赖，即依赖加载完毕后才会执行最后一个参数的回调函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Calling define with module ID, dependency array, and factory function</span></span><br><span class="line">define(<span class="string">'myModule'</span>, [<span class="string">'dep1'</span>, <span class="string">'dep2'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">dep1, dep2</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Define the module value by returning a value.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>AMD</code>基于<code>require.js</code>，主要解决的问题是：</p><ul><li>实现<code>js</code>文件的异步加载，避免网页失去响应；</li><li>管理模块之间的依赖性，便于代码的编写和维护。</li></ul><p>使用<code>AMD</code>改写上面的例子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [AMD] a.js</span></span><br><span class="line">define(<span class="string">'moduleA'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reverse();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a: a</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [AMD] b.js</span></span><br><span class="line">define(<span class="string">'moduleB'</span>, [<span class="string">'moduleA'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">moduleA</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = moduleA.a.concat([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    b: b</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [AMD] c.js</span></span><br><span class="line">define(<span class="string">'moduleC'</span>, [<span class="string">'moduleB'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">moduleB</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = moduleB.b.join(<span class="string">'-'</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    c: c</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>需要在入口文件配置依赖的脚本的路径，在此例中是<code>index.js</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [AMD] index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要在入口文件配置依赖的路径</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  path: &#123;</span><br><span class="line">    moduleA: <span class="string">'./a'</span>,</span><br><span class="line">    moduleB: <span class="string">'./b'</span>,</span><br><span class="line">    moduleC: <span class="string">'./c'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'moduleA'</span>, <span class="string">'moduleB'</span>, <span class="string">'moduleC'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">moduleA, moduleB, moduleC</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(moduleA.a);</span><br><span class="line">  <span class="built_in">console</span>.log(moduleB.b);</span><br><span class="line">  <span class="built_in">console</span>.log(moduleC.c);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>AMD</code>解决了模块依赖问题，规范化了输入输出。</p><h3 id="CMD-SeaJS"><a href="#CMD-SeaJS" class="headerlink" title="CMD (SeaJS)"></a>CMD (SeaJS)</h3><p><code>Common Module Definition</code>，即通用模块定义。<code>CMD</code> 是 <code>SeaJS</code> 在推广过程中对模块定义的规范化产出。</p><p><code>CMD</code>规范和<code>AMD</code>类似，都主要运行于浏览器端，写法上看起来也很类似。主要是区别在于<strong>模块初始化时机</strong></p><ul><li><strong>AMD是依赖前置：只要模块作为依赖时，就会加载并初始化，加载完后执行回调</strong></li><li><strong>CMD是依赖就近：模块作为依赖且被引用时才会初始化，否则只会加载。</strong></li><li><code>AMD</code> 的 <code>API</code> 默认是一个当多个用，<code>CMD</code> 严格的区分推崇职责单一。例如，<code>AMD</code> 里 <code>require</code> 分全局的和局部的。CMD里面没有全局的 <code>require</code>，提供 <code>seajs.use()</code> 来实现模块系统的加载启动。<code>CMD</code> 里每个 <code>API</code> 都简单纯粹。</li></ul><h3 id="UMD规范"><a href="#UMD规范" class="headerlink" title="UMD规范"></a>UMD规范</h3><p>集结了 <code>CommonJs, CMD, AMD</code> 的规范于一身，通过运行时或者编译时让同一个代码模块在使用 <code>CommonJs, CMD, AMD</code>的项目中运行。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UMD 简单实现</span></span><br><span class="line">(<span class="function">(<span class="params">global, factory</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//如果 当前的上下文有 defin e函数，说明处于AMD 环境下</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define([<span class="string">"moduleA"</span>], factory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;<span class="comment">// CommonJS</span></span><br><span class="line">        <span class="keyword">let</span> moduleA = <span class="built_in">require</span>(<span class="string">"moduleA"</span>)</span><br><span class="line">        modules.exports = factory(moduleA)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        global.moduleA = factory(global.moduleA) <span class="comment">//直接挂载成 windows 全局变量 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, (moduleA) =&gt; &#123;</span><br><span class="line">    <span class="comment">//本模块的定义</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h3><p><code>import</code>命令用于输入其他模块提供的功能，<code>export</code>命令用于规定模块的对外接口。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lib.js</span></span><br><span class="line"><span class="comment">//导出常量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sqrt = <span class="built_in">Math</span>.sqrt;</span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">diag</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqrt(square(x) + square(y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; square, diag &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">11</span>)); <span class="comment">// 121</span></span><br><span class="line"><span class="built_in">console</span>.log(diag(<span class="number">4</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><strong>ES6 Module 和 CommonJS 对比</strong></p><ul><li><code>ES6 Module</code>是<strong>静态化</strong>的，在编译时确定模块的依赖关系。<code>CommonJS</code>和<code>AMD</code>只能在运行时确定。</li><li><code>CommonJS</code>模块输出的是一个值的<strong>浅拷贝</strong>，<code>ES6</code>输出的是值的引用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [CommonJS]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">'./lib'</span>).counter;</span><br><span class="line"><span class="keyword">var</span> incCounter = <span class="built_in">require</span>(<span class="string">'./lib'</span>).incCounter;</span><br><span class="line"><span class="built_in">console</span>.log(counter);  <span class="comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 上面代码说明，**counter** 输出以后，**lib.js** 模块内部的变化就影响不到 **counter** 了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------------------//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//common_lib.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    obj.counter ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    counter : <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.obj = obj;</span><br><span class="line">exports.incCounter = incCounter</span><br><span class="line"></span><br><span class="line"><span class="comment">//common_main.js</span></span><br><span class="line"><span class="keyword">let</span> lib = <span class="built_in">require</span>(<span class="string">'./common_lib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lib.obj);   <span class="comment">//3</span></span><br><span class="line">lib.incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(lib.obj);   <span class="comment">//4</span></span><br><span class="line"><span class="comment">// 可以理解为对 lib 是浅拷贝，所以能够更改引用类型的 obj</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [ES6 Module]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">//3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">//4</span></span><br><span class="line"><span class="comment">// **incCounter** 方法调用，能够修改**counter**, 说明 **ES6 module** 导出的是**变量的引用**，而不是值拷贝。</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.bilibili.com/video/BV1K54y1S7zx" target="_blank" rel="noopener">JavaScript模块化全面解析</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="noopener">Javascript模块化编程</a></li><li><a href="https://segmentfault.com/a/1190000018725060" target="_blank" rel="noopener">JS模块化——CommonJS AMD CMD UMD ES6 Module 比较</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模块化的演变&quot;&gt;&lt;a href=&quot;#模块化的演变&quot; class=&quot;headerlink&quot; title=&quot;模块化的演变&quot;&gt;&lt;/a&gt;模块化的演变&lt;/h2&gt;&lt;p&gt;在没有模块化的概念之前，代码量也不大的时候，可以直接将&lt;code&gt;JavaScript&lt;/code&gt;代码写在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>IIFE-立即调用函数表达式</title>
    <link href="https://12vv.github.io/2021/07/01/IIFE/"/>
    <id>https://12vv.github.io/2021/07/01/IIFE/</id>
    <published>2021-07-01T06:00:00.000Z</published>
    <updated>2021-08-14T18:45:10.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>立即调用的匿名函数又被称作立即调用的函数表达式<code>(IIFE, Immediately Invoked Function Expression)</code>。</p><p>它类似于函数声明，但由于被包含在括号中，所以会被解释为<code>函数表达式</code>。</p><a id="more"></a><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I am IIFE"</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// w3c 标准建议使用</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I am IIFE"</span>);</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 箭头函数写法</span></span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I am IIFE"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>如果以<code>function</code>开头，则会被识别为函数声明，<strong>函数声明是不能被被执行符号<code>()</code>执行的！</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>); <span class="comment">// Uncaught SyntaxError: </span></span><br><span class="line"><span class="comment">// Function statements require a function name</span></span><br><span class="line">&#125;();                  <span class="comment">// 这个报错是因为函数声明一定要有函数名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>); <span class="comment">// Uncaught SyntaxError: Unexpected token ')'</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>只要是函数表达式，就可以加执行符号达到立即执行的效果了。</p><p>也可以加上一元操作符将函数转成表达式 (不推荐使用)。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上操作符，编译器不再认为这是一个函数声明</span></span><br><span class="line"></span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);<span class="comment">// 1</span></span><br><span class="line">&#125;();</span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);<span class="comment">// 2</span></span><br><span class="line">&#125;();</span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);<span class="comment">// 3</span></span><br><span class="line">&#125;()</span><br><span class="line">,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);<span class="comment">// 4</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>很多人习惯在前面加<code>;</code>，就是为了避免两个立即执行函数连在一起时发生如下错误：以下代码只能输出一个<code>a</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncaught TypeError: (intermediate value)(...) is not a function</span></span><br></pre></td></tr></table></figure><p>再补充一个奇怪的情况：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">&#125;(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这里不会报错，也不会输出，实际上这种写法会被解释成<strong>一个函数声明，还有一个无意义的表达式</strong>。也就是下面的样子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个表达式</span></span><br><span class="line">(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>关于非匿名自执行函数</strong></p><p>注意：立即执行函数也是可以加名字的，但是要注意，<strong>函数名<code>只读</code></strong>。看下面这个例子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>在非严格模式下会输出<code>[Function b]</code>，在严格模式下会报错！<code>Uncaught TypeError: Assignment to constant variable.</code></p><p>原因就在于匿名函数属于表达式的范畴，如果添加了名字，遵从<strong>具名函数表达式</strong>的规范。</p><p>函数表达式中函数的识别名是不需要的，有名称的函数表达式，就是<code>具名函数表达式 (Named function expressions, NFE)</code>，其函数的识别名，它的作用域是<strong>只在函数的主体内部</strong>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">b = <span class="number">10</span>;                 <span class="comment">// 严格模式下改行报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(b);         <span class="comment">// [Function b]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b);  <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(b);   <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="进行初始化"><a href="#进行初始化" class="headerlink" title="进行初始化"></a>进行初始化</h3><p>在<code>ES6</code>的<code>let</code>和<code>const</code>，可以用立即执行函数来模拟块级作用域，避免全局变量污染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">"bar"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">foo; <span class="comment">// ReferenceError: foo is not defined</span></span><br></pre></td></tr></table></figure><p>类似的，有一些操作需要在页面加载完成立即执行，比如绑定事件、创建对象等，也需要一些临时的变量，但是之后不会再用到。这时候使用立即执行函数，将这些初始化代码包裹在其局部作用域中，就是个很好的方案。</p><p>下面这个例子在初始化时绑定监听事件，<code>count</code>变量不会被泄漏出去，而且点击事件也能正常运作。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hi"</span>, count++);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h3 id="模块化封装"><a href="#模块化封装" class="headerlink" title="模块化封装"></a>模块化封装</h3><p>使用一个立即执行函数创建的闭包，实现对象字面量创建对象的私有成员。以此来封装模块，暴露的接口成为公有方法以供调用，私有成员外部无法取得。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myobj = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 私有成员</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"my, oh my"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现公有部分</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">myobj.getName(); <span class="comment">// "my, oh my"</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="经典题"><a href="#经典题" class="headerlink" title="经典题"></a>经典题</h3><p>下面这道经典题目</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ ) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上很多解释是说是因为事件队列的原因，说因为回调函数被放到事件队列中，<code>for</code>循环执行完毕<code>i</code>的值已经变成了<code>5</code>，再执行<code>5</code>个<code>console.log(i)</code>所以会输出<code>5</code>个<code>5</code>。</p><p>开始我看到这种解释有些困惑，为什么换成<code>let</code>就能解决呢？如果说是因为事件循环的原因，那换成<code>let</code>，循环完毕<code>i</code>也变成<code>5</code>了。</p><p>之后我补充了作用域，作用域链，执行上下文等知识，才了解到这种现象是由于作用域造成的。</p><p>之所以使用<code>let</code>就可以得到期望结果，是由于<code>let</code>的块级作用域，每一轮循环都会有一个新的词法作作用域环境保存每一轮的<code>i</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">blockLexicalEnvironment = &#123;</span><br><span class="line">  i: <span class="number">0</span>,</span><br><span class="line">  outer: &lt;globalLexicalEnvironment&gt;</span><br><span class="line">&#125;</span><br><span class="line">blockLexicalEnvironment = &#123;</span><br><span class="line">  i: 1,</span><br><span class="line">  outer: &lt;globalLexicalEnvironment&gt;</span><br><span class="line">&#125;</span><br><span class="line">blockLexicalEnvironment = &#123;</span><br><span class="line">  i: 2,</span><br><span class="line">  outer: &lt;globalLexicalEnvironment&gt;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>之后执行<code>console.log(i)</code>，由于当前作用域没有<code>i</code>，所以沿着<strong>作用域链</strong>找，即找到了他上一层的块级词法环境中的<code>i</code>。</p><p>所以使用这里使用立即执行函数也是同样的原理。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ ) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的<br>作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</p></blockquote><h3 id="立即执行函数的递归"><a href="#立即执行函数的递归" class="headerlink" title="立即执行函数的递归"></a>立即执行函数的递归</h3><p>立即执行函数是如果不加名字，又想要自身递归调用怎么办呢？可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee" target="_blank" rel="noopener">arguments.callee</a>，已在ES5严格模式中被废弃，了解原因可以看<a href="https://stackoverflow.com/questions/103598/why-was-the-arguments-callee-caller-property-deprecated-in-javascript" target="_blank" rel="noopener">这里</a>。</p><blockquote><p><code>callee</code>是<code>arguments</code>对象的一个属性。它可以用于引用该函数的函数体内当前正在执行的函数。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> init = (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(init);    <span class="comment">// 3628800</span></span><br></pre></td></tr></table></figure><p>当然，可以使用<strong>具名函数</strong>直接调用，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> init = (<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n * a(n<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(init);    <span class="comment">// 3628800</span></span><br></pre></td></tr></table></figure><h3 id="关于变量提升"><a href="#关于变量提升" class="headerlink" title="关于变量提升"></a>关于变量提升</h3><p>匿名函数属于函数表达式，创建执行上下文时不会被提升。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);       <span class="comment">// 正常输出</span></span><br><span class="line"><span class="built_in">console</span>.log(sayName);   <span class="comment">// Uncaught ReferenceError: sayName is not defined</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;)(<span class="string">'Millzie'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"foo"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.bitsrc.io/understanding-scope-and-scope-chain-in-javascript-f6637978cf53" target="_blank" rel="noopener">https://blog.bitsrc.io/understanding-scope-and-scope-chain-in-javascript-f6637978cf53</a></p><p><a href="https://stackoverflow.com/questions/103598/why-was-the-arguments-callee-caller-property-deprecated-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/103598/why-was-the-arguments-callee-caller-property-deprecated-in-javascript</a></p><p>Kyle Simpson. 2014. You Don’t Know JS: Scope &amp; Closures (1st. ed.). O’Reilly Media, Inc.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;立即调用的匿名函数又被称作立即调用的函数表达式&lt;code&gt;(IIFE, Immediately Invoked Function Expression)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;它类似于函数声明，但由于被包含在括号中，所以会被解释为&lt;code&gt;函数表达式&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Optics</title>
    <link href="https://12vv.github.io/2020/02/29/stcg05/"/>
    <id>https://12vv.github.io/2020/02/29/stcg05/</id>
    <published>2020-02-29T07:00:00.000Z</published>
    <updated>2021-03-14T18:59:53.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="经验模型"><a href="#经验模型" class="headerlink" title="经验模型"></a>经验模型</h3><p>经典光照模型属于经验模型，单独计算<code>环境光(ambient)</code>，<code>漫反射光(diffuse)</code>和<code>镜面光(specular)</code>，再进行叠加。</p><p><img src="/images/stcg/05lightmod.jpg" alt></p><ul><li><code>环境光(ambient)</code>：不来自于特定光源，不依赖于观察方向和场景中其他的任意光。</li><li><code>漫反射光(diffuse)</code>：均匀的散射在表面各个方向，独立于观察方向，依赖于表面法向量和光源方向，也和表面的颜色有关。</li><li><code>镜面光(specular)</code>：表面反射的高光，与表面材质有关，依赖于表面法向量和光源方向和观察方向，颜色可或不可结合表面颜色。<code>光泽度(shininess)</code>越高，高光越趋近于一个亮点。</li></ul><p>例如<code>1975</code>年<code>Phong</code>提出的<code>Phong反射模型(Phong Reflection Model)</code>:</p><script type="math/tex; mode=display">I_{Phong} = k_aI_a + k_d(n \cdot l)I_d + k_s(r \cdot v)^aI_s</script><h3 id="基于物理的分析模型"><a href="#基于物理的分析模型" class="headerlink" title="基于物理的分析模型"></a>基于物理的分析模型</h3><p>经典光照模型没有遵循<code>能量守恒定律(Energy Conservation)</code>: 出射光线的能量永远不能超过入射光线的能量（发光面除外）。而基于微平面理论的物理分析模型是能量守恒的。这项理论认为，达到微观尺度之后任何平面都可以用被称为<code>微平面(Microfacets)</code>的细小镜面来进行描绘。根据平面粗糙程度的不同，这些细小镜面的取向排列可以相当不一致。如下图所示，不同的微表面分布造成不同的微表面上发现的分布，以此可以模拟不同的材质。</p><p><img src="/images/stcg/05micro.jpg" alt="不同的微表面分布"></p><p>产生的效果就是：一个平面越是粗糙，这个平面上的微平面的排列就越混乱。这些微小镜面这样无序取向排列的影响就是，当我们特指镜面光/镜面反射时，入射光线更趋向于向完全不同的方向<code>发散(Scatter)</code>开来，进而产生出分布范围更广泛的镜面反射。而与之相反的是，对于一个光滑的平面，光线大体上会更趋向于向同一个方向反射，造成更小更锐利的反射。</p><p><img src="/images/stcg/surface.png" alt="粗糙和光滑平面的反射"></p><p>为了遵守能量守恒定律，当一束光线接触到一个表面，分成一个折射部分和一个反射部分。反射部分就是会直接反射开来而不会进入平面的那部分光线，这就是我们所说的镜面光照。而折射部分就是余下的会进入表面并被吸收的那部分光线，这也就是我们所说的漫反射光照。</p><h3 id="专有名词"><a href="#专有名词" class="headerlink" title="专有名词"></a>专有名词</h3><p>以下是一些专有名词的解释。</p><p><img src="/images/stcg/terminology.jpg" alt="Terminology"></p><h4 id="Radiant-Flux"><a href="#Radiant-Flux" class="headerlink" title="Radiant Flux"></a>Radiant Flux</h4><p>辐射通量是光源发出的单位时间总能量的量度，$\Phi = \frac{dQ}{dt} $ 单位是瓦特。</p><p>下图是日光的光谱分布，<code>辐射通量(radiant Flux)</code>是函数的面积(确切地说，该面积是<code>光通量(luminous flux)</code>，因为图表将波长限制在人类可见光范围内)。</p><p><img src="/images/stcg/dayavgspectrum.jpg" alt="Daylight spectral distribution"></p><p>注意：一般在计算机图形中不实用波长强度而是使用三原色编码，即<code>RGB</code>，作为辐射通量表示的简化。虽然有一些信息上的损失，但是对于视觉效果的影响几乎可以忽略。</p><h4 id="Solid-angle"><a href="#Solid-angle" class="headerlink" title="Solid angle"></a>Solid angle</h4><p><code>立体角(solid angle)</code>是一种测量物体在观察者看来有多大的方法。 下图展示将物体的轮廓投射到一个以我们观察点为中心的单位球体的表面上。 我们得到的形状的<code>面积</code>是立体角。下图中单位球面上的区域<code>w</code>即为浅蓝色多边形的投影的立体角。</p><p><img src="/images/stcg/solid_angle.png" alt="Solid angle"></p><p>下图是角和立体角的类比。</p><p><img src="/images/stcg/solid2.jpg" alt="Angle and solid angle"></p><h4 id="Radiant-Intensity"><a href="#Radiant-Intensity" class="headerlink" title="Radiant Intensity"></a>Radiant Intensity</h4><p><code>辐射强度(radiant Intensity)</code>是在单位球面上，一个光源向每单位立体角的<code>通量(flow of energy)</code>。 如果你有一个向各个方向发射的光源，那么有多少光(通量)实际上是朝着一个特定的方向发射的？ 强度是一种衡量的方法，描述沿着一个方向通过一个立体角的通量。 描述它的公式是$I =\frac{d\Phi}{ d\omega}$，其中$\Phi$是辐射通量，$\omega$是立体角。</p><p><img src="/images/stcg/intensity.png" alt="Light intensity"></p><h4 id="Irradiance"><a href="#Irradiance" class="headerlink" title="Irradiance"></a>Irradiance</h4><p>所有投射到某单位面积上的光线的总和，而这个和就称为辐射照度或者<code>辐照度(Irradiance)</code>。</p><p><img src="/images/stcg/irradiance.jpg" alt="Irradiance on a Surface"></p><h4 id="Radiance"><a href="#Radiance" class="headerlink" title="Radiance"></a>Radiance</h4><p><code>radiance</code>辐射率表示一个拥有辐射强度<code>Φ</code>的光源在单位面积<code>A</code>，单位立体角<code>ω</code>上的辐射出的总能量，辐射率方程如下。(与<code>irradiance</code>不同的是它考虑特定方向的光。)</p><script type="math/tex; mode=display">L = \frac{dI}{dA cos\theta} = \frac{d\phi^2}{ dA d\omega cos\theta} = \frac{dE}{dwcos\theta}</script><p><img src="/images/stcg/radiance.png" alt="Radiance components"></p><p>其中，$\Phi$是辐射通量，<code>A</code>是收到光照影响的区域，$\omega$是立体角，$cos\theta$ 是一个缩放因子，随着角度的变化，光线逐渐消失。</p><p><img src="/images/stcg/05explain.jpg" alt="Radiant Intensity, Irradiance and radiance"></p><h3 id="反射方程"><a href="#反射方程" class="headerlink" title="反射方程"></a>反射方程</h3><script type="math/tex; mode=display">L_o(p,\omega_o) = \int\limits_{\Omega} f_r(p,\omega_i,\omega_o) L_i(p,\omega_i) n \cdot \omega_i  d\omega_i</script><p>其中的$n \cdot \omega_i$等同于$cos\theta_i$。</p><p>$L_0$ 表示了从$\omega_0$方向上观察，光线投射到点<code>p</code>上反射出来的辐照度。就是要把以点<code>p</code>为中心的单位表面接收到的所有入射光，在半球领域Ω内所有方向上的入射光的<code>积分(亦即求和)</code>。</p><h4 id="BRDF"><a href="#BRDF" class="headerlink" title="BRDF"></a>BRDF</h4><p><code>双向反射分布函数(Bidirectional reflectance distribution function, BRDF)</code>，定义了给定入射方向$w_i$上的<code>辐射照度(irradiance)</code>如何影响给定出射方向$w_o$上的<code>辐射率(radiance)</code>，定义如下。</p><script type="math/tex; mode=display">BRDF(w_i, w_o) = \frac{dL_o(w_o)}{dE_i(w_i)}</script><p><img src="/images/stcg/05brdf.jpg" alt="BRDF"></p><p>通俗来说，<code>BRDF</code>描述的是一个特定表面把一个方向收集到的能量反射到一个特定方向的能量分布。这是由材质决定的，比如漫反射材质，收到的能量会被均等的分到各个上半球方向上。</p><p><code>BRDF</code>基于微平面理论来近似的求得材质的反射与折射属性。对于一个BRDF，为了实现物理学上的可信度，它必须遵守能量守恒定律，也就是说反射光线的总和永远不能超过入射光线的总量。严格上来说，同样采用$\omega_i$和$\omega_0$作为输入参数的<code>Blinn-Phong</code>光照模型也被认为是一个<code>BRDF</code>。然而由于<code>Blinn-Phong</code>模型并没有遵循能量守恒定律，属于经验模型，不被认为是基于物理的渲染。</p><p>再回到反射方程，查看公式容易理解，反射方程中的$f_r$即为<code>BRDF</code>，根据<code>BRDF</code>的定义，反映了对于某个入射方向，出射方向的辐照度，所以对于每一个入射方向，用$f_r$乘以该方位角的<code>radiance</code>，即可得到对这一方向入射光反射出光的照度，再对半球面各个方向，所有方位角得到的结果积分，就可以得到在点<code>p</code>接收到的所有光，在某一方向的出射照度。</p><p>另一个理解方法是$L_i(p,\omega_i) n \cdot \omega_i  d\omega_i$即入射的<code>irradiance</code>，而$f_r$为<code>radiance</code>和<code>irradiance</code>的比值，使用$f_r$乘以<code>irradiance</code>即可得到出射的<code>radiance</code>，再求积分即可。</p><p>基于反射率公式是围绕所有入射辐射率的总和，也就是辐照度来计算的，所以我们需要计算的就不只是是单一的一个方向上的入射光，而是一个以点<code>p</code>为球心的半球领域Ω内所有方向上的入射光。一个<code>半球领域(Hemisphere)</code>可以描述为以平面法线<code>n</code>为轴所环绕的半个球体。</p><p><img src="/images/stcg/hemisphere.png" alt="hemisphere"></p><p><strong>注：通用的渲染方程可以理解为反射方程加上一个自发光项。</strong></p><h4 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h4><p>这是一个简化版本的渲染方程式。用<code>BRDF</code>乘以入射的辐照度即得到外向的辐射。</p><script type="math/tex; mode=display">L_o(\omega_i, \omega_o) = BRDF(w_i, w_o) dE_i</script><p>根据上面<code>Radiance</code>那一节推导的$dE = L d\omega cos\theta$，代入上式得</p><script type="math/tex; mode=display">L_o(\omega_i, \omega_o) = BRDF(w_i, w_o) L_i d\omega_i cos\theta_i</script><p>最后，考虑各个方向的光，因此对上式求积分，得到</p><script type="math/tex; mode=display">L_o = \underset{i\in in}{\int } BRDF(w_i, w_o) L_i cos\theta_i d\omega_i</script><p>有时为了便于计算，转换称球面坐标的表示方法。</p><p><img src="/images/stcg/05d_solid_angles.jpg" alt="Differential Solid Angle"></p><p>根据上图，$d\omega_i = \sin(\theta) d\theta d\phi$，代入上面的式子得到下式，这里可以这样理解：因为立体角在空间中是均匀分布的，使用$d\omega$即可，但是转换成球面坐标的表示方法，$\theta$在接近<code>0</code>的时候采样会更多，在接近$\frac{\pi}{2}$时更少，所以乘以$sin(\theta)$作为补偿项。</p><p><img src="/images/stcg/change_angle.jpg" alt="the differential solid angle can be defined in terms of the differential polar (θ) and azimuthal (ϕ) angles"></p><script type="math/tex; mode=display">L_o = {\int_{\phi=0}^{2\pi}}{ \int_{\theta=0}^{\pi/2}} BRDF(w_i, w_o) L_i sin(\theta) d \theta d \phi</script><h4 id="Cook-Torrance-BRDF"><a href="#Cook-Torrance-BRDF" class="headerlink" title="Cook-Torrance BRDF"></a>Cook-Torrance BRDF</h4><p><code>BRDF</code>基于微平面理论来近似的求得材质的反射与折射属性。对于一个BRDF，为了实现物理学上的可信度，它必须遵守能量守恒定律，也就是说反射光线的总和永远不能超过入射光线的总量。严格上来说，同样采用$\omega_i$和$\omega_0$作为输入参数的<code>Blinn-Phong</code>光照模型也被认为是一个<code>BRDF</code>。然而由于<code>Blinn-Phong</code>模型并没有遵循能量守恒定律，属于经验模型，不被认为是基于物理的渲染。</p><p>目前最常用的基于物理的渲染模型是<code>Cook-Torrance BRDF模型</code>，有漫反射和镜面反射两个部分，公式如下，其中$k_d$是早先提到过的入射光线中被折射部分的能量所占的比率，而$k_s$是被反射部分的比率。</p><script type="math/tex; mode=display">f_r = k_d f_{lambert} +  k_s f_{cook-torrance}</script><p>第一部分漫反射部分$f_{lambert}$被称为<code>Lambertian漫反射</code>，通常用$f_{lambert} = \frac{\rho}{\pi}$计算。$\rho$是<code>反照率(Albedo)</code>，除以$\pi$的原因是如下，为了对漫反射光进行标准化，因为前面含有<code>BRDF</code>的积分方程是受$\pi$影响的。简单推导如下(利用了漫反射<code>BRDF</code>不再和入射出射光有关，因而是一个常数)：</p><p><img src="/images/stcg/05diffuse.jpg" alt="light is equally reflected in each output direction"></p><p>公式第二部分镜面反射部分形式如下：</p><script type="math/tex; mode=display">f_{cook-torrance} = \frac{DFG}{4(\omega_o \cdot n)(\omega_i \cdot n)}</script><p>下面分别分析函数<code>D, F ,G</code>。</p><p>在微表面理论中，物体表面被分为无数个微小的镜面，根据表面的粗糙程度不同，微镜面的分布也不同，以此模拟不同材质的粗糙程度，对于镜面来说，只有法线方向和中间向量重合的时候反射光线才有效，函数D是一个正态分布函数，就是用来衡量中间向量H和法线重合的分布，在该模型中采用<code>TROWBRIDGE-REITZ GGX</code>计算，从公式中可以看到，当粗糙度$\alpha$越低即表面越光滑，与中间向量取向一致的微平面将会集中在很小的半径范围内，造成明亮的的点：</p><script type="math/tex; mode=display">NDF_{GGX TR}(n, h, \alpha) = \frac{\alpha^2}{\pi((n \cdot h)^2 (\alpha^2 - 1) + 1)^2}</script><p>因为微表面分布不均，反射出来的光线可能为被同一物体的其他微表面所遮挡，几何函数G使用SCHLICK-GGX近似计算求得微平面间相互遮蔽的比率，并使用史密斯方法把几何遮蔽和几何阴影都纳入其中：</p><script type="math/tex; mode=display">G_{SchlickGGX}(n, v, k) = \frac{n \cdot v}{(n \cdot v)(1 - k) + k }</script><p>当垂直观察的时候，任何物体或者材质表面都有一个基础反射率<code>(Base Reflectivity)</code>，但是如果以一定的角度往平面上看的时候所有反光都会变得明显起来。比如用垂直的视角观察木制或金属的桌面，此时一定只有最基本的反射性。但是如果你从近乎90度（与法线的夹角）的角度观察的话反光就会变得明显的多。如果从理想的90度视角观察，所有的平面理论上来说都能完全的反射光线。这种现象因菲涅尔而闻名，并体现在了菲涅尔方程之中。</p><p>菲涅尔方程是一个相当复杂的方程式，不过幸运的是菲涅尔方程可以用Fresnel-Schlick近似法求得近似解：</p><script type="math/tex; mode=display">F_{Schlick}(h, v, F_0) = F_0 + (1 - F_0) ( 1 - (h \cdot v))^5</script><p>$F_0$表示平面的基础反射率，它是利用所谓<code>折射指数(Indices of Refraction)</code>或者说<code>IOR</code>计算得出的。</p><p>最后得到<code>Cook-Torrance</code>的反射率方程，</p><script type="math/tex; mode=display">L_o(p,\omega_o) = \int\limits_{\Omega} (k_d\frac{c}{\pi} + k_s\frac{DFG}{4(\omega_o \cdot n)(\omega_i \cdot n)})L_i(p,\omega_i) n \cdot \omega_i  d\omega_i</script><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="http://web.stanford.edu/class/cs148/lectures.html" target="_blank" rel="noopener">Stanford CS148 Introduction to Computer Graphics and Imaging (Fall 2019)</a></li><li>Fundamentals of Computer Graphics, 4th Edition.<br>Steve Marschner and Peter Shirley, A K Peters/CRC Press, 2015. (Ch10)</li><li>OpenGL Programming Guide: The Official Guide to Learning OpenGL, Version 4.3 (8th Edition) Dave Shreiner, Addison-Wesley Professional, 2013. (Ch7)</li><li><a href="http://www.codinglabs.net/article_physically_based_rendering.aspx" target="_blank" rel="noopener">Article - Physically Based Rendering</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;经验模型&quot;&gt;&lt;a href=&quot;#经验模型&quot; class=&quot;headerlink&quot; title=&quot;经验模型&quot;&gt;&lt;/a&gt;经验模型&lt;/h3&gt;&lt;p&gt;经典光照模型属于经验模型，单独计算&lt;code&gt;环境光(ambient)&lt;/code&gt;，&lt;code&gt;漫反射光(diffuse)</summary>
      
    
    
    
    
    <category term="Computer Graphics" scheme="https://12vv.github.io/tags/Computer-Graphics/"/>
    
    <category term="BRDF" scheme="https://12vv.github.io/tags/BRDF/"/>
    
    <category term="radiometry" scheme="https://12vv.github.io/tags/radiometry/"/>
    
  </entry>
  
  <entry>
    <title>Light and Color</title>
    <link href="https://12vv.github.io/2020/02/18/stcg02/"/>
    <id>https://12vv.github.io/2020/02/18/stcg02/</id>
    <published>2020-02-18T07:00:00.000Z</published>
    <updated>2021-08-13T15:17:06.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="电磁波谱-Electromagnetic-Spectrum"><a href="#电磁波谱-Electromagnetic-Spectrum" class="headerlink" title="电磁波谱 (Electromagnetic Spectrum)"></a>电磁波谱 (Electromagnetic Spectrum)</h3><p>依照波长的长短、频率以及波源的不同，电磁波谱可大致分为：无线电波、微波、红外线、可见光、紫外线、x射线和伽马射线。<br><img src="/images/stcg/electro.png" alt></p><p>波长((\lambda))和能量((\Delta E))的关系：(\lambda \Delta E = 1239.9)</p><h3 id="光谱-Spectrum"><a href="#光谱-Spectrum" class="headerlink" title="光谱 (Spectrum)"></a>光谱 (Spectrum)</h3><p>光谱可以看成是光子数目和波长的关系，又因为同样波长的光子，数目越多能量越大，所以也可以看成是波长和能量的关系。<br><img src="/images/stcg/dayavgspectrum.jpg" alt></p><p>然而基于上述关系构建的光谱渲染器(spectral renderer)代价太过高昂，因此考虑到使用红绿蓝的组合来模拟光(暂不考虑光的偏振，衍射和干涉等)。</p><h3 id="人眼-Human-eye"><a href="#人眼-Human-eye" class="headerlink" title="人眼 (Human eye)"></a>人眼 (Human eye)</h3><p>人的视网膜(retina)上的光度感应器(photodetector)是<code>视杆细胞(rods)</code>和<code>视锥细胞(cones)</code>。</p><p><img src="/images/stcg/retina.jpeg" alt></p><p><code>视锥细胞(cones)</code>在视网膜中央凹处(<code>fovea</code>)密度最大，而此处几乎没有<code>视杆细胞(rods)</code>。<code>视杆细胞(rods)</code>和<code>视锥细胞(cones)</code>的分布如下图所示。<br><img src="/images/stcg/rc.jpeg" alt></p><p>视杆细胞是感受弱光刺激的细胞，对光线的强弱反应非常敏感，主要在弱光下发挥作用，不能辨别颜色。比如，猫头鹰视网膜中视杆细胞较多，故夜间活动视觉灵敏。视锥细胞则可以在正常明度下，为我们提供视觉信息。</p><p>实际上在视网膜上存在着三种用来感知颜色的视锥细胞，他们分别叫做<code>S(Short)-视锥细胞</code>，<code>M(Middle)-视锥细胞</code>，<code>L(Long)-视锥细胞</code>，对应着波长的短，中，长。</p><p>每种视锥细胞都对某一个特定波长的颜色异常敏感。一般来说，<code>S-视锥细胞</code>对波长<code>420nm</code>的光线最为敏感，<code>M-视锥细胞</code>对<code>530nm</code>的波长最为敏感，而<code>L-视锥细胞</code>对于<code>560nm</code>的波长最为敏感。这也是为什么在计算机图形学中，颜色用<code>红绿蓝三原色red-green-blue (RGB)</code>来表示的原因。</p><p><img src="/images/stcg/conesrespond.jpg" alt></p><h3 id="三色理论-Trichromatic-Theory"><a href="#三色理论-Trichromatic-Theory" class="headerlink" title="三色理论 (Trichromatic Theory)"></a>三色理论 (Trichromatic Theory)</h3><h4 id="格拉斯曼颜色定律-Grassmann’s-laws"><a href="#格拉斯曼颜色定律-Grassmann’s-laws" class="headerlink" title="格拉斯曼颜色定律 (Grassmann’s laws)"></a>格拉斯曼颜色定律 (Grassmann’s laws)</h4><ul><li>Symmetry law</li><li>Transitive law</li><li>Proportionality law</li><li>Additivity law</li></ul><h4 id="配色实验-Color-Matching-Experiments"><a href="#配色实验-Color-Matching-Experiments" class="headerlink" title="配色实验 (Color Matching Experiments)"></a>配色实验 (Color Matching Experiments)</h4><blockquote><p>使用该实验确定的假想观察者，可将任意的可见光谱功率分布转换为一组三刺激值，从而量化地描述人类色觉。</p></blockquote><p>简单来说，就是认为调整三种不同波长的单色光(波长为分别为435.8, 546.1, 700 nm)的组合，使其和另一种颜色匹配(同色异谱：一种颜色的再现与观察颜色的光源特性有一定的关系。)，然后记录下这个波段的光对应的三原色的系数。得到下面的曲线。</p><p><img src="/images/stcg/matchexp.jpg" alt></p><h4 id="加色与减色-Additive-vs-Subtractive-Colors"><a href="#加色与减色-Additive-vs-Subtractive-Colors" class="headerlink" title="加色与减色 (Additive vs Subtractive Colors)"></a>加色与减色 (Additive vs Subtractive Colors)</h4><p><img src="/images/stcg/addsub.jpg" alt></p><h4 id="色彩空间-Color-Space"><a href="#色彩空间-Color-Space" class="headerlink" title="色彩空间 (Color Space)"></a>色彩空间 (Color Space)</h4><p><img src="/images/stcg/Colorspace.png" alt></p><p><img src="/images/stcg/rgbcs.jpg" alt="RGB色彩空间"></p><p>由于每个显示设备有自己<code>原色(primaries)的光谱分布(spectral distributions)</code>，所以即使有一张图片在RGB空间中定义，在不同设备上显示也可能不同。而且，使用RGB来表示颜色也有点不符合直觉，因为当我们看到“黄色”的时候，并不觉得是等同的“红”光和“绿”光混合成的，我们只觉得是一种“黄”色的光。所以，可以利用矩阵将RGB空间的转换为<code>CIE color spaces</code>或者它的变体(一个维度表示brightness，另外两个维度表示chromaticity)。</p><p><img src="/images/stcg/rgb4.jpg" alt="RGB色彩空间"></p><p><img src="/images/stcg/trans.jpg" alt="Transformations for standard RGB color spaces"></p><p>还有一种方法是使用更加直观的表示方法，即<code>Hue-Saturation-Value (HSV) color space</code>。</p><p><img src="/images/stcg/hsv.jpg" alt="Hue-Saturation-Value (HSV) color space"></p><ul><li>色调(H, Hue): 用角度度量，取值范围为0°～360°，从红色开始按逆时针方向计算，红色为0°，绿色为120°,蓝色为240°。</li><li>饱和度(S, Saturation): 表示颜色接近光谱色的程度。一种颜色，可以看成是某种光谱色与白色混合的结果。其中光谱色所占的比例愈大，颜色接近光谱色的程度就愈高(颜色越鲜明)，颜色的饱和度也就愈高。</li><li>明度(V/B, Value/Brightness): 明度表示颜色明亮的程度，对于光源色，明度值与发光体的光亮度有关；对于物体色，此值和物体的透射比或反射比有关。</li></ul><h3 id="色调映射-Tone-Mapping"><a href="#色调映射-Tone-Mapping" class="headerlink" title="色调映射 (Tone Mapping)"></a>色调映射 (Tone Mapping)</h3><blockquote><p>色调映射(Tone Mapping/ Tone Reproduction)，是在有限动态范围(dynamic range)媒介上近似显示高动态范围图像的一项计算机图形学技术。</p></blockquote><p>本质上来讲，色调映射是要解决的问题是进行大幅度的对比度衰减将场景亮度变换到可以显示的范围，同时要<strong>保持图像细节与颜色等对于表现原始场景非常重要的信息</strong>。</p><h4 id="动态范围-Dynamic-Range"><a href="#动态范围-Dynamic-Range" class="headerlink" title="动态范围 (Dynamic Range)"></a>动态范围 (Dynamic Range)</h4><blockquote><p>动态范围是可变化信号(例如声音或光)最大值和最小值的比值。也可以用以10为底的对数(分贝)或以2为底的对数表示。</p></blockquote><p>在传统图像中，每一个像素的RGB分别用用一位(byte)来表示，所以对于<code>低动态范图像(Low Dynamic Range images)</code>，每个颜色通道仅有256个不同的值。所以要保存<code>高动态范围成像(High Dynamic Range Imaging)</code>需要很大的文件格式。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>为此，可以采用<code>色调映射</code>技术压缩高动态范围的图像的信息，得到的是JPEG格式图像。</p><p>另外，<code>高动态范围成像(High Dynamic Range Imaging)</code>的目的就是要正确地表示真实世界中从太阳光直射到最暗的阴影这样大的范围亮度。但是，CRT、LCD、打印机以及其它图像显示方法只能显示有限动态范围的图像，这些设备是低动态范围(Low Dynamic Range)的。所以采用<code>色调映射</code>技术来将HDR图像呈现到低动态范围的显示设备上。</p><p>由于目前大多数显示设备基于<code>8比特数模变换器(eight-bit D/A converters)</code>，所以可以把<code>色调映射</code>的过程看作是浮点数值到比特数的转换过程。</p><h4 id="基于频率的方法-Frequency-Based-Operators"><a href="#基于频率的方法-Frequency-Based-Operators" class="headerlink" title="基于频率的方法 (Frequency-Based Operators)"></a>基于频率的方法 (Frequency-Based Operators)</h4><p>假设图像中每个像素的亮度(luminance)近似于物体表面的<code>反射率(reflectance)</code>和<code>照度(illuminance)</code>的乘积。</p><script type="math/tex; mode=display">L_v(x, y) = r(x, y)E_v(x, y)</script><p>下标v表示使用(photometrically weighted quantities)，取对数得到：</p><script type="math/tex; mode=display">D(x, y) = log(L_v(x, y)) = log(r(x, y)E_v(x, y)) = log(r(x, y)) + log(E_v(x, y))</script><p>这样，成像被分成了<code>反射率(reflectance)</code>和<code>照度(illuminance)</code>两个分量的叠加。</p><p>因为<code>反射率(reflectance)</code>是<code>低动态范围(Low Dynamic Range)</code>，而<code>照度(illuminance)</code>是<code>高动态范围(High Dynamic Range)</code>的，如果能想办法分离这两个成分，主要压缩<code>高动态范围(High Dynamic Range)</code>部分即可。</p><p>对于典型的漫射场景，由于带纹理的表面以及表面边缘的存在，反射率分量倾向于表现出高<code>空间频率(spatial frequencies)</code>。而照度往往是空间上缓慢变化的函数。所以可以依据频率(使用傅立叶变换等方法)分离两个分量。压缩<code>照度(illuminance)</code>分量而保持<code>反射率(reflectance)</code>分量不变。</p><p>下面是一个应用例子，<code>Bilateral filtering</code>就是基于这个方法。</p><p><img src="/images/stcg/bf.jpg" alt="Bilateral filtering removes small details but preserves sharp gradients (left). The associated detail layer is shown on the right."></p><h3 id="Gamma校正-Gamma-Correction"><a href="#Gamma校正-Gamma-Correction" class="headerlink" title="Gamma校正 (Gamma Correction)"></a>Gamma校正 (Gamma Correction)</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><blockquote><p>首先，我们的眼睛不像照相机那样感知光线。</p></blockquote><p>当两倍的光子击中传感器时，传感器就接收到两倍的信号(“线性”)。而当我们感知到两倍的光的时候只是觉得亮了一点(非线性)。</p><p><img src="/images/stcg/camvseyes.jpg" alt></p><p>与相机相比，人眼对暗色调的变化比对亮色调的变化更敏感。这种特性有一个生物学上的原因: 它使我们的视觉能够在更广泛的亮度范围内工作。</p><p>伽马矫正是我们眼睛的光敏感度和相机的光敏感度之间的转换。 当一个数字图像被保存下来时，它被“<code>伽玛编码(gamma encoded)</code>”—-使一个数字图像中两倍的数值我们所感知的两倍亮度的数值更为接近。</p><h4 id="Gamma定义"><a href="#Gamma定义" class="headerlink" title="Gamma定义"></a>Gamma定义</h4><script type="math/tex; mode=display">Vout = Vin^{gamma}</script><ul><li><code>Vout</code>: 是输出亮度值。</li><li><code>Vin</code>: 输入/实际亮度值。</li></ul><p>当<code>gamma&lt;1</code>时，直线向上拱起，当<code>gamma&gt;1</code>时则向下凹。</p><blockquote><p>另外，伽玛编码图像能更有效地存储色调(tone)。 </p></blockquote><p>由于伽马编码将色调层次重新分配到更接近我们眼睛感知的层次，因此描述给定色调范围所需的比特更少。 也就是说，因为人眼对于暗色调更加敏感，伽马矫正就在暗色调区间划分了更多层，提高了存储空间的利用率。否则，过多的比特将用于描述较明亮的色调(相机相对更敏感，人眼较不敏感) ，而缺少比特将用于描述较暗的色调。<br><img src="/images/stcg/gamma2.jpg" alt></p><p>另外，如上图所示，伽玛编码将色调几乎均匀地在整个范围内划分(perceptually uniform)。</p><h4 id="GAMMA-WORKFLOW"><a href="#GAMMA-WORKFLOW" class="headerlink" title="GAMMA WORKFLOW"></a>GAMMA WORKFLOW</h4><p><img src="/images/stcg/workflow.jpg" alt></p><h5 id="Image-Gamma"><a href="#Image-Gamma" class="headerlink" title="Image Gamma"></a>Image Gamma</h5><p>通常<code>image gamma</code>的设置嵌入在图像文件中，大多数图像设置gamma值为1/2.2，(如上图左一)。当相机将捕获的图像转换为标准<code>JPEG</code>或<code>TIFF</code>文件格式时应用gamma将本地相机的色调层次重新分配到感知更加均匀的层次中。<br><img src="/images/stcg/imggamma.jpg" alt></p><h5 id="Display-Gamma"><a href="#Display-Gamma" class="headerlink" title="Display Gamma"></a>Display Gamma</h5><p>主要目的是补偿<code>image gamma</code>，使得图像显示在屏幕上有合适的亮度。更高的<code>Display Gamma</code>导致更暗且对比度更高的图像。</p><p><img src="/images/stcg/disgamma.jpg" alt></p><h5 id="System-Gamma"><a href="#System-Gamma" class="headerlink" title="System Gamma"></a>System Gamma</h5><p>同<code>viewing gamma</code>。为了更真实的再现一个场景，理想的情况是<code>gamma = 1.0</code>，那么<code>Vout = Vin</code>，即原场景的光与屏幕上显示的光相同。然而为了提高对比度，会设置gamma略大于1。这样可以弥补显示设备的<code>动态范围(dynamic range)</code>的限制。</p><blockquote><p>Gamma correction is applied to the gamma encoded (compressed)<br>images to convert them back to the original scene luminance.</p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="http://web.stanford.edu/class/cs148/lectures.html" target="_blank" rel="noopener">Stanford CS148 Introduction to Computer Graphics and Imaging (Fall 2019)</a></li><li>Fundamentals of Computer Graphics, 4th Edition.<br>Steve Marschner and Peter Shirley, A K Peters/CRC Press, 2015. (Ch21, Ch22, Ch23)</li><li>OpenGL Programming Guide: The Official Guide to Learning OpenGL, Version 4.3 (8th Edition) Dave Shreiner, Addison-Wesley Professional, 2013. (Ch7)</li><li><a href="https://www.scratchapixel.com/lessons/digital-imaging/colors/introduction" target="_blank" rel="noopener">Introduction to Light, Color and Color Space</a></li><li><a href="https://www.cambridgeincolour.com/tutorials/gamma-correction.htm" target="_blank" rel="noopener">UNDERSTANDING GAMMA CORRECTION</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;电磁波谱-Electromagnetic-Spectrum&quot;&gt;&lt;a href=&quot;#电磁波谱-Electromagnetic-Spectrum&quot; class=&quot;headerlink&quot; title=&quot;电磁波谱 (Electromagnetic Spectrum)&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Computer Graphics" scheme="https://12vv.github.io/tags/Computer-Graphics/"/>
    
    <category term="gamma correction" scheme="https://12vv.github.io/tags/gamma-correction/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://12vv.github.io/2018/01/01/hello-world/"/>
    <id>https://12vv.github.io/2018/01/01/hello-world/</id>
    <published>2018-01-01T07:00:00.000Z</published>
    <updated>2019-05-07T05:24:35.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HELLO-WORLD"><a href="#HELLO-WORLD" class="headerlink" title="HELLO WORLD"></a>HELLO WORLD</h2><a id="more"></a><h3 id="Do-Not-Go-Gentle-into-That-Good-Night"><a href="#Do-Not-Go-Gentle-into-That-Good-Night" class="headerlink" title="Do Not Go Gentle into That Good Night"></a>Do Not Go Gentle into That Good Night</h3><p><strong> FROM Dylan Thomas</strong></p><p><em>Do not go gentle into that good night,</em>  </p><p><em>Old age should burn and rave at close of day;</em></p><p><em>Rage, rage against the dying of the light.</em></p><p><em>Though wise men at their end know dark is right,</em></p><p><em>Because their words had forked no lightning they.</em></p><p><em>Do not go gentle into that good night.</em></p><p><em>Good men, the last wave by, crying how bright.</em></p><p><em>Their frail deeds might have danced in a green bay,</em></p><p><em>Rage, rage against the dying of the light.</em></p><p><em>Wild men who caught and sang the sun in flight.</em></p><p><em>And learn, too late, they grieved it on its way.</em></p><p><em>Do not go gentle into that good night.</em></p><p><em>Grave men, near death, who see with blinding sight.</em></p><p><em>Blind eyes could blaze like meteors and be gay.</em></p><p><em>Rage, rage against the dying of the light.</em></p><p><em>And you, my father, there on the sad height,</em></p><p><em>Curse, bless, me now with your fierce tears, I pray.</em></p><p><em>Do not go gentle into that good night.</em></p><p><em>Rage, rage against the dying of the light.</em></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;HELLO-WORLD&quot;&gt;&lt;a href=&quot;#HELLO-WORLD&quot; class=&quot;headerlink&quot; title=&quot;HELLO WORLD&quot;&gt;&lt;/a&gt;HELLO WORLD&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
